// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli

    //Product Overview
    var sku = 1    
    var upc = 1    
    //...
    const ownerID = accounts[0]
    //Farmer Details
    const originFarmerID = accounts[1]    
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    //...
    var productID = sku + upc
    //Product Details
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]

    //Others
    const emptyAddress = '0x00000000000000000000000000000000000000'

    // Helpers
    const state = {
        Harvested: 0,
        Processed: 1,
        Packed: 2,
        ForSale: 3,
        Sold: 4,
        Shipped: 5,
        Received: 6,
        Purchased: 7,
    }

    const posInBufferOne = {
        itemSKU: 0,
        itemUPC: 1,
        ownerID: 2,
        originFarmerID: 3,
        originFarmName: 4,
        originFarmInformation: 5,
        originFarmLatitude: 6,
        originFarmLongitude: 7,
    }
    const posInBufferTwo = {
        itemSKU: 0,
        itemUPC: 1,
        productID: 2,
        productNotes: 3,
        productPrice: 4,
        itemState: 5,
        distributorID: 6,
        retailerID: 7,
        consumerID: 8,
    }
    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 0 test
    it('Asign and ckecks Accounts to their Roles', async ()=> {
        const supplyChain = await SupplyChain.deployed()

        //Add a farmer, a distributor, a retailer, a consumer in their roles
        await supplyChain.addFarmer(originFarmerID)
        await supplyChain.addDistributor(distributorID)
        await supplyChain.addRetailer(retailerID)
        await supplyChain.addConsumer(consumerID)

        // Retrieve confirm Roles
        const isFarmer = await supplyChain.isFarmer(originFarmerID)
        const isDistributor = await supplyChain.isDistributor(distributorID)
        const isRetailer = await supplyChain.isRetailer(retailerID)
        const isConsumer = await supplyChain.isConsumer(consumerID)

        // Verify the result set
        assert.equal(isFarmer, true, 'Error: Invalid Farmer')
        assert.equal(isDistributor, true, 'Error: Invalid Distributor')
        assert.equal(isRetailer, true, 'Error: Invalid Retailer')
        assert.equal(isConsumer, true,' Error: Invalid Consumer')

    })
    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        // await supplyChain.addFarmer(accounts[1]);
        // await supplyChain.addDistributor(accounts[2]);
        // await supplyChain.addRetailer(accounts[3]);
        // await supplyChain.addConsumer(accounts[4]);

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        // var event = supplyChain.Harvested()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })
        await supplyChain.Harvested((err, res) => {
            eventEmitted = true
        })


        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc,
             originFarmerID,
             originFarmName,
             originFarmInformation,
             originFarmLatitude,
             originFarmLongitude,
             productNotes,
             {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[posInBufferOne.itemSKU], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[posInBufferOne.itemUPC], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[posInBufferOne.ownerID], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[posInBufferOne.originFarmerID], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[posInBufferOne.originFarmName], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[posInBufferOne.originFarmInformation], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[posInBufferOne.originFarmLatitude], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[posInBufferOne.originFarmLongitude], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Harvested, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        await supplyChain.Processed((err, res) => {
            eventEmitted = true
        })  

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc,{from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        //const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Processed, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        await supplyChain.Packed((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc,{from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Packed, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false       
        
        // Watch the emitted event ForSale()
        await supplyChain.ForSale((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc,productPrice,{from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[posInBufferTwo.productPrice], productPrice, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.ForSale, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        await supplyChain.Sold((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc,{from: distributorID, value: productPrice})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        
        // Verify the result set
        assert.equal(resultBufferOne[posInBufferOne.ownerID], distributorID, 'Error: Distributor is not the new owner')
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Sold, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()    
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        await supplyChain.Shipped((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc,{from: distributorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Shipped, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        await supplyChain.Received((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc,{from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[posInBufferOne.ownerID], retailerID, 'Error: Retailer is not the new owner')
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Received, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        await supplyChain.Purchased((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc,{from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      
        // Verify the result set
        assert.equal(resultBufferOne[posInBufferOne.ownerID], consumerID, 'Error: Consumer is not the new owner')
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Purchased, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[posInBufferOne.itemSKU], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[posInBufferOne.itemUPC], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[posInBufferOne.ownerID], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[posInBufferOne.originFarmerID], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[posInBufferOne.originFarmName], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[posInBufferOne.originFarmInformation], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[posInBufferOne.originFarmLatitude], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[posInBufferOne.originFarmLongitude], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[posInBufferTwo.itemSKU], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[posInBufferTwo.itemUPC], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[posInBufferTwo.productID], productID, 'Error: Invalid productID')
        assert.equal(resultBufferTwo[posInBufferTwo.productNotes], productNotes, 'Error: Invalid productNotes')
        assert.equal(resultBufferTwo[posInBufferTwo.productPrice], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[posInBufferTwo.itemState], state.Purchased,  'Error: Invalid itemState')
        assert.equal(resultBufferTwo[posInBufferTwo.distributorID], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[posInBufferTwo.retailerID ], retailerID , 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[posInBufferTwo.consumerID ], consumerID, 'Error: Missing or Invalid consumerID')
    })

});

